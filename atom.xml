<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://imenghu.github.io</id>
    <title>i萌虎</title>
    <updated>2019-10-31T11:07:38.816Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://imenghu.github.io"/>
    <link rel="self" href="https://imenghu.github.io/atom.xml"/>
    <logo>https://imenghu.github.io/images/avatar.png</logo>
    <icon>https://imenghu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, i萌虎</rights>
    <entry>
        <title type="html"><![CDATA[深入理解JS闭包]]></title>
        <id>https://imenghu.github.io/post/shen-ru-li-jie-js-bi-bao</id>
        <link href="https://imenghu.github.io/post/shen-ru-li-jie-js-bi-bao">
        </link>
        <updated>2019-10-30T13:17:27.000Z</updated>
        <content type="html"><![CDATA[<p>闭包(closure)是Javacript语言的一个难点，也是它的特色，很多高级应用都要依靠闭包实现。</p>
<p>一、变量的作用域</p>
<p>要理解闭包，首先必须理解Javascript特殊的变量作用域。</p>
<p>变量的作用域无非就是两种：全局变量和局部变量。</p>
<p>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>
<p>js code:</p>
<p>var n = 999;</p>
<p>function f1(){</p>
<p>console.log(n);</p>
<p>}</p>
<p>f1();　　//999</p>
<p>另一方面，在函数外部自然无法读取函数内的局部变量。</p>
<p>js code:</p>
<p>function f1(){</p>
<p>var n = 999;</p>
<p>}</p>
<p>console.log(n);　　//error</p>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量。</p>
<p>js code</p>
<p>function f1(){</p>
<p>n = 999;</p>
<p>}</p>
<p>f1();</p>
<p>console.log(n);　　//999</p>
<p>二、如何从外部读取局部变量？</p>
<p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>
<p>那就是在函数的内部，再定义一个函数。</p>
<p>js code</p>
<p>function f1(){</p>
<p>n = 999;</p>
<p>function f2(){</p>
<p>console.log(n);　　//999</p>
<p>}</p>
<p>}</p>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量对f1就是不可见的。这就是javascript语言特有的‘链式作用域’结构(chain scope)，子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们就可以在f1外部读取它的内部变量了。</p>
<p>js code</p>
<p>function f1(){</p>
<p>n = 999;</p>
<p>function f2(){</p>
<p>console.log(n);</p>
<p>}</p>
<p>return f2;</p>
<p>}</p>
<p>var result = f1();　　//返回的是f2函数</p>
<p>result();　　//999</p>
<p>三、闭包的概念</p>
<p>上一节代码中的f2函数，就是闭包。</p>
<p>闭包就是能够读取其他函数内部变量的函数，函数没有被释放，整条作用域链上的局部变量都将得到保留。</p>
<p>由于在javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成‘定义在一个函数内部的函数’。</p>
<p>所以，在本质上，闭包就是将函数内部和函数外部连接的一座桥梁。</p>
<p>四、闭包的用途</p>
<p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<p>js code</p>
<p>function f1(){</p>
<p>var n = 999;</p>
<p>nAdd = function(){</p>
<p>n += 1;</p>
<p>}</p>
<p>function f2(){</p>
<p>console.log(n);</p>
<p>}</p>
<p>return f2;</p>
<p>}</p>
<p>var result = f1();</p>
<p>result();　　//从函数外部通过闭包f2获取到函数f1内部局部变量的值</p>
<p>nAdd();　　//从函数外部通过闭包修改局部变量n的值</p>
<p>result();　　//再次通过闭包f2获取到函数f1内部局部变量的值</p>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n 一直保存在内存中，并没有在f1调用后被自动清除。</p>
<p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，不会再调用结束后，被垃圾回收机制(garbage collection)回收。</p>
<p>这段代码中另一个值得注意的地方，就是‘nAdd=function(){n+=1}’这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数(anonymous function)，而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<p>五、使用闭包的注意点</p>
<p>1&gt;由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法时，在退出函数之前，将不使用的局部变量全部删除。</p>
<p>2&gt;闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象(object)使用，把闭包当作它的公用方法，把内部变量当作它的私有属性，这时一定要小心，不要随便改变父函数内部变量的值。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sql Server中查询当天，最近三天，本周，本月，最近一个月，本季度的数据的sql语句]]></title>
        <id>https://imenghu.github.io/post/sql-server-zhong-cha-xun-dang-tian-zui-jin-san-tian-ben-zhou-ben-yue-zui-jin-yi-ge-yue-ben-ji-du-de-shu-ju-de-sql-yu-ju</id>
        <link href="https://imenghu.github.io/post/sql-server-zhong-cha-xun-dang-tian-zui-jin-san-tian-ben-zhou-ben-yue-zui-jin-yi-ge-yue-ben-ji-du-de-shu-ju-de-sql-yu-ju">
        </link>
        <updated>2019-10-30T12:15:11.000Z</updated>
        <content type="html"><![CDATA[<p>当天：</p>
<pre><code class="language-sql">select * from T_news where datediff(day,addtime,getdate())=0
</code></pre>
<p>最近三天：</p>
<pre><code class="language-sql">select * from T_news where datediff(day,addtime,getdate())&lt;= 2 and datediff(day,addtime,getdate())&gt;= 0
</code></pre>
<p>本周：</p>
<pre><code class="language-sql">select * from T_news WHERE (DATEPART(wk, addtime) = DATEPART(wk, GETDATE())) AND (DATEPART(yy, addtime) = DATEPART(yy, GETDATE()))
注意：此时不能用 datediff 差值为7,因为，datediff只表示间隔数
</code></pre>
<p>本月：</p>
<pre><code class="language-sql">select * from T_news WHERE (DATEPART(yy, addtime) = DATEPART(yy, GETDATE())) AND (DATEPART(mm, addtime) = DATEPART(mm, GETDATE()))
</code></pre>
<p>最近一个月：</p>
<pre><code class="language-sql">select * from T_news WHERE (DATEPART(yy, addtime) = DATEPART(yy, GETDATE())) 
AND ((DATEPART(mm, addtime) = DATEPART(mm, GETDATE())) OR (31-DATEPART(DD,addtime)+DATEPART(DD, GETDATE()))&lt;=31)
</code></pre>
<p>本季度：</p>
<pre><code class="language-sql">select * from T_news where DATEPART(qq, addtime) = DATEPART(qq, GETDATE()) and DATEPART(yy, addtime) = DATEPART(yy, GETDATE())
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[别降低对自己的要求，因为会变本加厉]]></title>
        <id>https://imenghu.github.io/post/bie-jiang-di-dui-zi-ji-de-yao-qiu-yin-wei-hui-bian-ben-jia-li</id>
        <link href="https://imenghu.github.io/post/bie-jiang-di-dui-zi-ji-de-yao-qiu-yin-wei-hui-bian-ben-jia-li">
        </link>
        <updated>2019-10-29T03:12:59.000Z</updated>
        <content type="html"><![CDATA[<p>1</p>
<p>相信在生活中，你也有这样的经历：</p>
<p>晚上睡觉前，你拿起手机对自己说就玩几分钟，结果成了几小时；酒席上，朋友给你劝酒，你实在拒绝不了，说只喝一杯，结果就有了第二杯、第三杯，最后大醉而归；和朋友逛街，本打算什么也不买，结果店员给你推荐了一支眉笔，最后你几乎买了一整套化妆品回家……</p>
<p>很多事情就是这样，一旦有了第一个突破口，结果就会一发不可收拾。</p>
<p>曾听过一个故事，讲的是一个小孩偷了一根针，他的母亲觉得只是一根针而已，就没有责怪他。后来他长大了，又不断做出小偷小摸的事情，直到有一次，他偷了金子被关进大牢。他对着母亲大哭：如果我第一次偷针的时候你就严厉地惩罚我，我就不会有今天。</p>
<p>俗话说，千里之堤毁于蚁穴。如果最初的那个小诱惑、小妥协、小毛病没有引起我们的重视，最后它可能就会变成击垮我们的罪魁祸首。</p>
<h2 id="人一旦放任自己第一次就容易有以后的无数次">人，一旦放任自己第一次，就容易有以后的无数次。</h2>
<p>2</p>
<p>生活中，我们很多人都在讲坚持，但真正能做到好好坚持的人却不多。这是为什么呢？</p>
<p>曾坚持过跑步的人都会遇到这种状况：今天太忙，不跑了；今天太累，明天再跑；今天心情不好，不想跑……当有了第一次找借口，让自己放弃坚持，最后往往就会放弃了坚持本身。</p>
<p>但作家村上春树不一样，他说：因为不想跑步，所以要去跑步。因为从未有过一次“偷懒”，所以他坚持跑了几十年。</p>
<p>坚持做一件事情确实很难，因为我们总有不想做的时候，总会给自己找理由，让自己处于轻松舒服的状态。</p>
<h2 id="但即使坚持很难也不要让自己轻易放弃-因为放弃了一次第二次就更容易了">但即使坚持很难，也不要让自己轻易放弃。因为放弃了一次，第二次就更容易了。</h2>
<p>3</p>
<p>曾有这样一项有趣的实验：一位心理学家找来两辆一模一样的汽车，他把其中一辆停在美国加州帕洛阿尔托的中产阶级社区，而另一辆放在相对杂乱的纽约布朗克斯区。</p>
<p>心理学家先把停在布朗克斯那辆车的车牌摘掉，顶棚打开，结果当天那辆车就被偷走了。</p>
<p>而放在帕洛阿尔托的那辆车，一个星期也无人理睬。后来，心理学家用锤子把那辆车的玻璃敲了个大洞。结果仅仅过了几个小时，那辆车也不见了。</p>
<p>以这项实验为基础，有人提出了一个“破窗效应”理论：一间房子如果窗户破了，没有人去修补，隔不久，其他的窗户也会莫名其妙地被人打破；一面墙上如果出现一些涂鸦没有被清洗掉，很快墙上就会布满乱七八糟、不堪入目的东西；在一个很干净的地方，人们会很不好意思扔垃圾，可一旦地上有垃圾出现，人们就会毫不犹豫地随地乱扔垃圾，丝毫不觉得羞愧。</p>
<p>好的东西，人们会尽量保护它；而好的东西一旦有了裂痕，人们往往就会不自觉地放任其变得更坏。</p>
<h2 id="所以不要给自己放任自己的第一次机会不要打破自己的第一扇窗户">所以，不要给自己放任自己的第一次机会，不要打破自己的第一扇窗户。</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一文彻底搞懂python的垃圾回收机制]]></title>
        <id>https://imenghu.github.io/post/yi-wen-che-di-gao-dong-python-de-la-ji-hui-shou-ji-zhi-1</id>
        <link href="https://imenghu.github.io/post/yi-wen-che-di-gao-dong-python-de-la-ji-hui-shou-ji-zhi-1">
        </link>
        <updated>2019-10-28T09:17:36.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一-什么是内存管理和垃圾回收">一 、什么是内存管理和垃圾回收</h2>
<p>Python GC主要使用<strong>引用计数（reference counting）<strong>来跟踪和回收垃圾。在引用计数的基础上，通过“<strong>标记-清除</strong>”（mark and sweep）解决容器对象可能产生的循环引用问题，通过</strong>“分代回收”</strong>（generation collection）以空间换时间的方法提高垃圾回收效率。</p>
<p>现在的高级语言如java，c#等，都采用了垃圾收集机制，而不再是c，c++里用户自己管理维护内存的方式。自己管理内存极其自由，可以任意申请内存，但如同一把双刃剑，为大量内存泄露，悬空指针等bug埋下隐患。</p>
<p>对于一个字符串、列表、类甚至数值都是对象，且定位简单易用的语言，自然不会让用户去处理如何分配回收内存的问题。</p>
<p>python里也同java一样采用了垃圾收集机制，不过不一样的是:</p>
<p>最关键的一句话：</p>
<p><strong>python采用的是引用计数机制为主，标记-清除和分代收集两种机制为辅的策略</strong></p>
<h2 id="二-引用计数reference-count">二、引用计数——reference count</h2>
<p>PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。</p>
<p>优点:<br>
1 简单<br>
2 实时性<br>
缺点:</p>
<p>那么关键问题来了，什么时候，引用计数增加1，什么时候引用计数减少1呢？</p>
<p>我们可以通过使用内置的模块**sys.getrefcount(a)**可以查看a对象的引用计数，但是比正常计数大1，因为调用函数的时候传入a，这会让a的引用计数+1。</p>
<p>1、简单实例：<br>
1 维护引用计数消耗资源<br>
2 循环引用——最致命的缺点（后面会定义）<br>
<strong>导致引用计数+1的情况：</strong><br>
1 对象被创建，例如a=23<br>
2 对象被引用，例如b=a<br>
3 对象被作为参数，传入到一个函数中，例如func(a)<br>
4 对象作为一个元素，存储在容器中，例如list1=[a,a]<br>
<strong>导致引用计数-1的情况</strong><br>
1 对象的别名被显式销毁，例如del a<br>
2 对象的别名被赋予新的对象，例如a=24<br>
3 一个对象离开它的作用域，例如f函数执行完毕时，func函数中的局部变量（全局变量不会）<br>
4 对象所在的容器被销毁，或从容器中删除对象</p>
<pre><code class="language-python">import sys
 
class A:
    pass
 
def func(x):
    print(f'对象a：{sys.getrefcount(x)-1}',end='  ')
    return x
 
#a=123.56
a=A()       #创建对象a
print(f'对象a：{sys.getrefcount(a)-1}')
b=a         #再一次引用对象a
print(f'对象a：{sys.getrefcount(a)-1}，对象b：{sys.getrefcount(b)-1}')
c=func(a)   #对象a作为函数参数
print(f'对象c：{sys.getrefcount(c)-1}')
d=list()    #对象a作为列表元素
d.append(a)
print(f'对象a：{sys.getrefcount(a)-1}，对象d：{sys.getrefcount(d)-1}')
</code></pre>
<p>运行结果为：</p>
<p>对象a：1</p>
<p>对象a：2，对象b：2</p>
<p>对象a：4 ,  对象c：3</p>
<p>对象a：4，对象d：1</p>
<p>==============================================================================================</p>
<p><strong>2、一个小的误区</strong></p>
<pre><code class="language-python">a=100

sys.getrefcount(a)-1
</code></pre>
<p>返回结果为：50</p>
<p>这是为什么呢？</p>
<p>这是因为python系统维护着一个常见的“整数常量池”即-5-255，在这个区间的数字会有其他的处理方式，这说明100这个数字，目前在系统中有 50 个引用。包括字符串也有一些特殊的处理，所以在使用应用技术的时候，最好是使用自己自定义的数据类型，这样方便分析，这也是上面为什么要自定义一个类型A的原因。</p>
<p><strong>3、减少引用的实例</strong></p>
<pre><code class="language-python">import sys
class B:
    pass
 
del d[0]  #删除列表d中的元素a
print(f'对象a：{sys.getrefcount(a)-1}，对象d：{sys.getrefcount(d)-1}')
 
a=B()   # a被重新复制，引用计数为1
print(f'对象a：{sys.getrefcount(a)-1}')
del a   #删除了a
</code></pre>
<p>运行结果为：</p>
<p>对象a：3，对象d：1<br>
对象a：1</p>
<p><strong>4、引用计数的致命缺陷——循环引用导致的内存泄漏</strong></p>
<p>什么是<strong>内存泄漏</strong>呢？</p>
<p>指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，失去了对该段内存的控制，因而造成了内存的浪费。导致程序运行速度减慢甚至系统崩溃等严重后果。有 <strong>del</strong>() 函数的对象间的循环引用是导致内存泄漏的主凶。不使用一个对象时使用:del object 来删除一个对象的引用计数就可以有效防止内存泄漏问题。通过 Python 扩展模块 gc 来查看不能回收的对象的详细信息。可以通过 sys.getrefcount(obj) 来获取对象的引用计数，并根据返回值是否为 0 来判断是否内存泄漏。</p>
<pre><code class="language-python">
def f2():
    while True:
        c1=ClassA()
        c2=ClassA()
        c1.t=c2
        c2.t=c1
        del c1
        del c2

</code></pre>
<p>创建了c1，c2后，0x237cf30（c1对应的内存，记为内存1）,0x237cf58（c2对应的内存，记为内存2）这两块内存的引用计数都是1，执行c1.t=c2和c2.t=c1后，这两块内存的引用计数变成2.</p>
<p>在del c1后，内存1的对象的引用计数变为1，由于不是为0，所以内存1的对象不会被销毁，所以内存2的对象的引用数依然是2，在del c2后，同理，内存1的对象，内存2的对象的引用数都是1。</p>
<p>虽然它们两个的对象都是可以被销毁的，但是由于循环引用，导致垃圾回收器都不会回收它们，所以就会导致内存泄露。</p>
<pre><code class="language-python">list1 = []
list2 = []
list1.append(list2)
list2.append(list1)
</code></pre>
<p>list1与list2相互引用，如果不存在其他对象对它们的引用，list1与list2的引用计数也仍然为1，所占用的内存永远无法被回收，这将是致命的。</p>
<p><strong>5、针对“循环引用”的解决办法</strong></p>
<p><strong>（1）标记清除技术——mark and sweep</strong></p>
<p><strong>（2）分代回收技术——generation collection</strong></p>
<p><strong>（3）手动使用gc模块</strong></p>
<h2 id="二-标记-清除机制mark-and-sweep">二、标记-清除机制——mark and sweep</h2>
<p>基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。</p>
<p>针对循环引用的情况：我们有一个“孤岛”或是一组未使用的、互相指向的对象，但是谁都没有外部引用。换句话说，我们的程序不再使用这些节点对象了，所以我们希望Python的垃圾回收机制能够足够智能去释放这些对象并回收它们占用的内存空间。但是这不可能，因为所有的引用计数都是1而不是0。Python的引用计数算法不能够处理互相指向自己的对象。你的代码也许会在不经意间包含循环引用并且你并未意识到。事实上，当你的Python程序运行的时候它将会建立一定数量的“浮点数垃圾”，Python的GC不能够处理未使用的对象因为应用计数值不会到零。</p>
<p>这就是为什么Python要引入Generational GC算法的原因！</p>
<p><strong>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</strong></p>
<p><strong>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</strong></p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20181112111929278.png" alt=""></figure>
<p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p>
<p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p>
<h2 id="三-分代技术generation-collection">三、分代技术——generation collection</h2>
<p>分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。</p>
<p>Python默认定义了三代对象集合，索引数越大，对象存活时间越长。<br>
分代技术是一种典型的以空间换时间的技术，这也正是java里的关键技术。这种思想简单点说就是：<strong>对象存在时间越长，越可能不是垃圾，应该越少去收集。</strong><br>
这样的思想，可以减少标记-清除机制所带来的额外操作。分代就是将回收对象分成数个代，每个代就是一个链表（集合），代进行标记-清除的时间与代内对象<br>
存活时间成正比例关系。<br>
从上面代码可以看出python里一共有三代，每个代的threshold值表示该代最多容纳对象的个数。默认情况下，当0代超过700,或1，2代超过10，垃圾回收机制将触发。<br>
0代触发将清理所有三代，1代触发会清理1,2代，2代触发后只会清理自己。<br>
举例： 当某些内存块M经过了3次垃圾收集的清洗之后还存活时，我们就将内存块M划到一个集合A中去，而新分配的内存都划分到集合B中去。当垃圾收集开始工作时，大多数情况都只对集合B进行垃圾回收，而对集合A进行垃圾回收要隔相当长一段时间后才进行，这就使得垃圾收集机制需要处理的内存少了，效率自然就提高了。在这个过程中，集合B中的某些内存块由于存活时间长而会被转移到集合A中，当然，集合A中实际上也存在一些垃圾，这些垃圾的回收会因为这种分代的机制而被延迟。</p>
<p>总结：</p>
<p><strong>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象。</strong></p>
<h2 id="四-垃圾回收与性能调优">四、垃圾回收与性能调优</h2>
<p>1.手动垃圾回收</p>
<p>2.调高垃圾回收阈值</p>
<p>3.避免循环引用（手动解循环引用和使用弱引用）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python大盘点：全局变量、局部变量、类变量、实例变量]]></title>
        <id>https://imenghu.github.io/post/python-da-pan-dian-quan-ju-bian-liang-ju-bu-bian-liang-lei-bian-liang-shi-li-bian-liang</id>
        <link href="https://imenghu.github.io/post/python-da-pan-dian-quan-ju-bian-liang-ju-bu-bian-liang-lei-bian-liang-shi-li-bian-liang">
        </link>
        <updated>2019-10-28T02:51:47.000Z</updated>
        <content type="html"><![CDATA[<p>1、全局变量：在模块内、在所有函数外面、在class外面，这就是全局变量。<br>
2、局部变量：在函数内、在class的方法（构造、类方法、静态方法、实例方法）内（变量未加self修饰），这就是局部变量<br>
3、 静态变量（类变量）：在class内的，但不在class的方法内的，这就是静态变量（类变量）<br>
4、 实例变量：在class的方法内的，用self修饰的变量，这就是实例变量</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[import aa 导入时做的事情]]></title>
        <id>https://imenghu.github.io/post/import-aa-dao-ru-shi-zuo-de-shi-qing</id>
        <link href="https://imenghu.github.io/post/import-aa-dao-ru-shi-zuo-de-shi-qing">
        </link>
        <updated>2019-10-26T00:55:15.000Z</updated>
        <content type="html"><![CDATA[<p>1 搜索aa这个模块并将里面的内容全部导入<br>
2 给个模块起一个别名aa,然后后面就可以使用aa.xx来调用模块里面的东西了。<br>
3 给import 取as 的别名的时候就是为了防止跟本地的变量名称冲突。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[接触互联网这么久，才知道搜索引擎这么用！]]></title>
        <id>https://imenghu.github.io/post/jie-hong-hu-lian-wang-zhe-me-jiu-cai-zhi-dao-sou-suo-yin-qing-zhe-me-yong</id>
        <link href="https://imenghu.github.io/post/jie-hong-hu-lian-wang-zhe-me-jiu-cai-zhi-dao-sou-suo-yin-qing-zhe-me-yong">
        </link>
        <updated>2019-10-22T06:36:58.000Z</updated>
        <content type="html"><![CDATA[<p>日常生活中，我们用的最多的可能就是搜索引擎了，不管是在电脑还是手机，追星、看新闻、搜索问题甚至疑难杂症，都需要搜索引擎的帮助。而我们一般使用的搜索引擎就是百度和Google了，当然在国内的科技圈，百度应该就是受众最广影响力最大的搜索引擎了。</p>
<p>可是，圈圈君问一句，“百度一下”了这么久，你真的确定会使用搜索引擎吗？学会了圈圈君今天整理的搜索引擎技巧，保证让你事半功倍！</p>
<p>1、双引号把搜索词放在双引号中，代表完全匹配搜索，也就是说搜索结果返回的页面包含双引号中出现的所有的词，连顺序也必须完全匹配。百度和Google 都支持这个指令。例如搜索： “电脑桌面壁纸”</p>
<p>2、减号</p>
<p>减号代表搜索不包含减号后面的词的页面。使用这个指令时减号前面必须是空格，减号后面没有空格，紧跟着需要排除的词。Google 和bd都支持这个指令。</p>
<p>例如：搜索 -引擎</p>
<p>返回的则是包含“搜索”这个词，却不包含“引擎”这个词的结果</p>
<p>3、inurl</p>
<p>inurl: 指令用于搜索查询词出现在url 中的页面。百度和Google 都支持inurl 指令。inurl 指令支持中文和英文。</p>
<p>比如搜索：inurl:情人节</p>
<p>返回的结果都是网址url 中包含“父亲节”的页面。由于关键词出现在url 中对排名有一定影响，使用inurl:搜索可以更准确地找到竞争对手。</p>
<p>表示搜索出来的链接里面带有关键词。</p>
<p>4、intitle</p>
<p>intitle: 指令返回的是页面title 中包含关键词的页面。Google 和百度都支持intitle 指令。</p>
<p>使用intitle 指令找到的文件是更准确的竞争页面。如果关键词只出现在页面可见文字中，而没有出现在title 中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。</p>
<p>表示搜索出来的标题里面带有关键词。</p>
<p>5、filetype</p>
<p>用于搜索特定文件格式。Google 和百度都支持filetype 指令。</p>
<p>比如搜索filetype:pdf 父亲节</p>
<p>返回的就是包含父亲节 这个关键词的所有pdf 文件。</p>
<p>6、site</p>
<p>site:是SEO 最熟悉的高级搜索指令，用来搜索某个域名下的所有文件。</p>
<p>你可以用这几种命令组合，例如site:.com inurl:blog “post a comment” -”comments closed” -”you must be logged in” “输入你的关键词“，</p>
<p>site:.com 是 指， 只显示.com的网站。 如果你想要 org的链接，就换成 site:.org，inurl:blog 是指博客。</p>
<p>7、星号</p>
<p>星号<em>是常用的通配符，也可以用在搜索中。百度不支持</em>号搜索指令。</p>
<p>比如在Google 中搜索：搜索*擎</p>
<p>其中的*号代表任何文字。返回的结果就不仅包含“搜索引擎”，还包含了“搜索收擎”，“搜索巨擎”等内容。</p>
<p>8、allintitle</p>
<p>allintitle:搜索返回的是页面标题中包含多组关键词的文件。</p>
<p>例如 ：allintitle:SEO 搜索引擎优化</p>
<p>就相当于：intitle:SEO intitle:搜索引擎优化</p>
<p>返回的是标题中中既包含“SEO”，也包含“搜索引擎优化”的页面</p>
<p>9、related</p>
<p>related:指令只适用于Google，返回的结果是与某个网站有关联的页面。比如搜索</p>
<p>related:http://cnseotool.com我们就可以得到Google 所认为的与点石网站有关联的其他页面。 这种关联到底指的是什么，Google 并没有明确说明，一般认为指的是有共同外部链接的网站。</p>
<p>上面介绍的这几个高级搜索指令，单独使用可以找到不少资源，或者可以更精确地定位竞争对手。把这些指令混合起来使用则更强大。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SqlServer：此数据库处于单用户模式，导致数据库无法删除的处理]]></title>
        <id>https://imenghu.github.io/post/sqlserverci-shu-ju-ku-chu-yu-dan-yong-hu-mo-shi-dao-zhi-shu-ju-ku-wu-fa-shan-chu-de-chu-li</id>
        <link href="https://imenghu.github.io/post/sqlserverci-shu-ju-ku-chu-yu-dan-yong-hu-mo-shi-dao-zhi-shu-ju-ku-wu-fa-shan-chu-de-chu-li">
        </link>
        <updated>2019-10-15T13:41:14.000Z</updated>
        <content type="html"><![CDATA[<p>今天在删除一个数据库时，一直报错，大意是：此数据库处理单用户模式，尚在连接当中，无法删除（既使将SQLServer停止后再启动也是如此）</p>
<p>百度之后找到了解决办法，备份于此:</p>
<p>USE [master]<br>
GO</p>
<p>/****** Object:  StoredProcedure [dbo].[killspid]    Script Date: 03/28/2011 11:01:32 ******/<br>
SET ANSI_NULLS ON<br>
GO</p>
<p>SET QUOTED_IDENTIFIER ON<br>
GO</p>
<p>--建一个存储过程，断开所有用户连接。<br>
create   proc   [dbo].[killspid]   (@dbname   varchar(20))<br>
as<br>
begin<br>
declare   @sql   nvarchar(500)<br>
declare   @spid   int<br>
set   @sql='declare   getspid   cursor   for<br>
select   spid   from   sysprocesses   where   dbid=db_id('''+@dbname+''')'<br>
exec   (@sql)<br>
open   getspid<br>
fetch   next   from   getspid   into   @spid<br>
while   @@fetch_status&lt;&gt;-1<br>
begin<br>
exec('kill   '+@spid)<br>
fetch   next   from   getspid   into   @spid<br>
end<br>
close   getspid<br>
deallocate   getspid<br>
end</p>
<p>GO</p>
<p>先在master中创建一个存储过程，用于干掉所有连接，然后调用</p>
<p>use   master<br>
exec   killspid   '出问题的数据库名'</p>
<p>再删除就ok了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[演讲汇报的6条技巧，学了你就能够在领导面前一炮而红]]></title>
        <id>https://imenghu.github.io/post/yan-jiang-hui-bao-de-6-tiao-ji-qiao-xue-liao-ni-jiu-neng-gou-zai-ling-dao-mian-qian-yi-pao-er-hong</id>
        <link href="https://imenghu.github.io/post/yan-jiang-hui-bao-de-6-tiao-ji-qiao-xue-liao-ni-jiu-neng-gou-zai-ling-dao-mian-qian-yi-pao-er-hong">
        </link>
        <updated>2019-10-15T08:53:04.000Z</updated>
        <content type="html"><![CDATA[<p>演讲报告是高度熟练的。让老板知道你的成绩，一个好的工作报告，对你另眼相看；相反，老板会无情地否定你的工作和成就，甚至你的能力。很显然，学习如何报告他们的工作是一个非常严肃和重要的一部分。</p>
<p>怎样才能更好地报告我们的工作？主要应注意以下几个方面：</p>
<p>一、调整心理状态，营造和谐氛围</p>
<p>向老板报告，以减轻和创造一个有利于报告的气氛。在报告之前，你可以在一些容易的话题上做一个简单的对话。它不仅是必要的，而且可以报告礼仪，采取的机会，明确情绪的稳定，一般报告，打好主意。这些看似普通，但非常有用。</p>
<p>二、从线到面，从抽象到具体</p>
<p>报告工作要注意逻辑层次，不要眉毛胡子抓的地方在哪里。一般来说，报告要抓住一条线，即总体思路和中心工作；一个表面，这是单独描述的措施，相关的工作做法，关键环节，遇到问题，处置的结果，收到的效果。这就是所谓的“如果网在课堂上，有一个相当动荡。”</p>
<p>三、职场箴言</p>
<p>不要让自己陷入这些困难，不要做一些可能会导致误解别人的骚扰，恐吓，威胁或行动。要在与异性接触时，应保持适当的距离，不要用太亲切的电话。避免穿着，身体或外观的异性。</p>
<p>四、突出中心，抛出“王牌”</p>
<p>一般说来没有报告，看起来很肤浅。通常情况下，报告人可以把自己的主管或更熟悉的情况，掌握全面的工作作为一个突破，抓住工作过程和典型的例子来分析，总结和改进。在报告中的“王牌”可以最能反映本单位工作的特点。</p>
<p>五、弥补不足，努力完成</p>
<p>下属向老板报告，往往会有一些错误，如一些情况不确定，或缺少的内容的一部分，总结是不适当的，等等。对于错误，可以采取向老板提供一些背景信息，组织访问活动，使用其他联系人和老板的交流交流等方法来报告的补充和修正，使其更深入和完整。</p>
<p>六、最有说服力的表现</p>
<p>一个人要想得到提升，一个人的嘴巴的修辞远远不够，必须要产生结果，可以吃几盎司米饭放在桌子上，让大家看看，为了达到减肥的目的。</p>
<p>这些技巧你悟到了吗？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何判断两个IP是不是在同一个网段内]]></title>
        <id>https://imenghu.github.io/post/ru-he-pan-duan-liang-ge-ip-shi-bu-shi-zai-tong-yi-ge-wang-duan-nei</id>
        <link href="https://imenghu.github.io/post/ru-he-pan-duan-liang-ge-ip-shi-bu-shi-zai-tong-yi-ge-wang-duan-nei">
        </link>
        <updated>2019-10-12T01:00:27.000Z</updated>
        <content type="html"><![CDATA[<p>和子网掩码转2进制相与 后，得到网络地址，网络地址一样则在一个子网。<br>
子网掩码是一个32位地址，子网掩码的作用是用于屏蔽IP地址的一部分以区别网络标识和主机标识，并说明该IP地址是在局域网上，还是在远程网上。一般的IP地址设置如下：</p>
<figure data-type="image" tabindex="1"><img src="https://imenghu.github.io/post-images/1570842143130.jpg" alt=""></figure>
<p>而怎么求网络标识和主机标识呢？网络标识的求法如下：将子网掩码的二进制与IP地址的二进制相“与”。具体如下</p>
<figure data-type="image" tabindex="2"><img src="https://imenghu.github.io/post-images/1570842274932.jpg" alt=""></figure>
<p>主机标识的求法：将子网掩码的二进制值取反后，再与IP地址进行与（AND）运算，具体如下：</p>
<figure data-type="image" tabindex="3"><img src="https://imenghu.github.io/post-images/1570842297577.jpg" alt=""></figure>
<p>要判断两个IP地址是不是在同一个网段，就是比较网络标识（网络地址），如果网络标识相同，就在同一子网，否则，不在同一子网。如下：</p>
<figure data-type="image" tabindex="4"><img src="https://imenghu.github.io/post-images/1570842326889.jpg" alt=""></figure>
]]></content>
    </entry>
</feed>