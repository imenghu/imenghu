<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://imenghu.github.io</id>
    <title>i萌虎</title>
    <updated>2019-11-08T02:53:41.826Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://imenghu.github.io"/>
    <link rel="self" href="https://imenghu.github.io/atom.xml"/>
    <logo>https://imenghu.github.io/images/avatar.png</logo>
    <icon>https://imenghu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, i萌虎</rights>
    <entry>
        <title type="html"><![CDATA[解读Python的命名空间]]></title>
        <id>https://imenghu.github.io/post/jie-du-python-de-ming-ming-kong-jian</id>
        <link href="https://imenghu.github.io/post/jie-du-python-de-ming-ming-kong-jian">
        </link>
        <updated>2019-11-08T02:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>前面我们理解了变量、函数的作用域，现在我们再深入讨论一下Python是如何给变量、函数划分作用域的。</p>
<p>我们在编写Python程序的过程中，如果要使用变量和函数，都需要先对变量和函数命名后才能使用。Python会把命名后的变量和函数分配到不同的命名空间，并通过名称来识别它们。Python为什么要区分不同的命名空间呢？它有两个作用：一个作用是不同的命名空间对应不同的作用域；另外一个作用是防止命名冲突。</p>
<p>我们先来看第一个作用。前面我们已经知道了在函数内部声明的变量属于局部变量，在模块内部声明的变量属于全局变量。Python是如何确定哪个变量是属于全局还是局部呢？这就需要用到命名空间概念了。</p>
<p>Python会把在函数内部声明的变量放置到局部命名空间，把在模块声明的变量放置到全局命名空间。在局部命名空间的变量其作用域只能是在函数内部范围，在全局命名空间的变量其作用域为整个模块。函数的命名也同样适用于局部命名空间和全局命名空间，嵌套函数的命名是放置在局部命名空间的，因此其作用域只能在父函数范围；而父函数的命名是放置在全局命名空间的，因此其作用域适用于整个模块。</p>
<p>关于命名空间的作用域，这里面还有一个问题。那就是在模块或函数中使用的Python自身提供的内建函数，它是属于哪个命名空间呢？因为这些内建函数在模块中随意使用，没有作用域的限制。其实Python还为自己的函数、程序提供了一个命名空间，这个命名空间是内置命名空间，在内置命名空间放置的变量、函数，在整个Python程序模块中都可以被访问，其作用域是整个程序。</p>
<p>小结一下，在Python程序执行过程中，会有局部命名空间、全局命名空间和内建命名空间同时存在。局部命名空间记录函数内部的变量、传入函数的参数、嵌套函数等被命名的对象；全局命名空间记录模块的变量、函数、类及其它导入的模块等被命名的对象；内建命名空间记录Python自身提供的函数、模块等被命名的对象。</p>
<p>我们再来看命名空间的第二个作用。命名空间可以预防变量和函数的命名冲突。前面我们知道了Python有三类命名空间，分别是局部命名空间、全局命名空间和内建命名空间。Python在编译和解释执行Python代码的过程中，会为每个模块建立一个全局命名空间，为模块中的每个函数建立局部命名空间。相当于Python为程序的每个模块和函数提供了一个封闭的命名空间，在这个封闭的命名空间中，函数及变量命名互相不受影响，在不同的模块中可以声明相同名称的函数，在不同的函数中可以声明相同名称的变量，虽然它们的名称相同，但它们之间没有任何联系。</p>
<p>那么Python如何把已命名的变量及函数的作用域和命名空间联系起来了呢？它所要做的就是在命名空间查询变量或函数的名称。Python访问一个已命名的变量或函数时，它会从三个命名空间中查询。首先从局部命名空间开始，如果没有找到，它就会继续查找全局命名空间，如果在全局命名空间中也没找到，它将在内建命名空间里查找。如果这些查找都失败了，它将会报出下面的错误。</p>
<figure data-type="image" tabindex="1"><img src="https://imenghu.github.io/post-images/1573181566780.jpg" alt=""></figure>
<p>在Python解释器中，我们输入了foo，没有给foo进行赋值（声明变量时需要进行赋值）。解释器会从命名空间中查找foo，它先从局部空间查找，如果找到了它就会使用局部命名空间的变量foo，即使全局命名空间也有变量foo。这就很容易理解为什么在函数内部声明的局部变量会覆盖掉在模块中声明的同名变量。</p>
<p>Python提供了内建函数可以输出命名空间里面的内容。输出局部命名空间的内容使用locals()函数，输出全局命名空间的的内容使用globals()函数。</p>
<figure data-type="image" tabindex="2"><img src="https://imenghu.github.io/post-images/1573181560065.jpg" alt=""></figure>
<p>上面的代码给出了如何访问局部命名空间和全局命名空间的内容，命名空间的内容以字典形式给出，字典的key是已命名的变量或函数名称，value是这些变量或函数的值。从输出内容可以看出，局部变量的π覆盖了全局变量的π。下图是输出结果。</p>
<figure data-type="image" tabindex="3"><img src="https://imenghu.github.io/post-images/1573181574655.jpg" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一篇文章让你彻底搞清楚Python中self的含义]]></title>
        <id>https://imenghu.github.io/post/yi-pian-wen-zhang-rang-ni-che-di-gao-qing-chu-python-zhong-self-de-han-yi</id>
        <link href="https://imenghu.github.io/post/yi-pian-wen-zhang-rang-ni-che-di-gao-qing-chu-python-zhong-self-de-han-yi">
        </link>
        <updated>2019-11-07T05:40:20.000Z</updated>
        <content type="html"><![CDATA[<p>刚开始学习Python的类写法的时候觉得很是麻烦，为什么定义时需要而调用时又不需要，为什么不能内部简化从而减少我们敲击键盘的次数？<br>
你看完这篇文章后就会明白所有的疑问。</p>
<p>self代表类的实例，而非类。<br>
实例来说明</p>
<p>class Test:<br>
def prt(self):<br>
print(self)<br>
print(self.<strong>class</strong>)</p>
<p>t = Test()<br>
t.prt()<br>
执行结果如下</p>
<p>&lt;<strong>main</strong>.Test object at 0x000000000284E080&gt;<br>
&lt;class '<strong>main</strong>.Test'&gt;<br>
从上面的例子中可以很明显的看出，self代表的是类的实例。而self.__class__则指向类。</p>
<p>self不必非写成self<br>
有很多童鞋是先学习别的语言然后学习Python的，所以总觉得self怪怪的，想写成this，可以吗？<br>
当然可以，还是把上面的代码改写一下。</p>
<p>class Test:<br>
def prt(this):<br>
print(this)<br>
print(this.<strong>class</strong>)</p>
<p>t = Test()<br>
t.prt()<br>
改成this后，运行结果完全一样。<br>
当然，最好还是尊重约定俗成的习惯，使用self。</p>
<p>self可以不写吗<br>
在Python的解释器内部，当我们调用t.prt()时，实际上Python解释成Test.prt(t)，也就是说把self替换成类的实例。<br>
有兴趣的童鞋可以把上面的t.prt()一行改写一下，运行后的实际结果完全相同。<br>
实际上已经部分说明了self在定义时不可以省略，如果非要试一下，那么请看下面：</p>
<p>class Test:<br>
def prt():<br>
print(self)</p>
<p>t = Test()<br>
t.prt()<br>
运行时提醒错误如下：prt在定义时没有参数，但是我们运行时强行传了一个参数。<br>
由于上面解释过了t.prt()等同于Test.prt(t)，所以程序提醒我们多传了一个参数t。</p>
<p>Traceback (most recent call last):<br>
File &quot;h.py&quot;, line 6, in <module><br>
t.prt()<br>
TypeError: prt() takes 0 positional arguments but 1 was given<br>
当然，如果我们的定义和调用时均不传类实例是可以的，这就是类方法。</p>
<p>class Test:<br>
def prt():<br>
print(<strong>class</strong>)<br>
Test.prt()<br>
运行结果如下</p>
<p>&lt;class '<strong>main</strong>.Test'&gt;<br>
在继承时，传入的是哪个实例，就是那个传入的实例，而不是指定义了self的类的实例。<br>
先看代码</p>
<p>class Parent:<br>
def pprt(self):<br>
print(self)</p>
<p>class Child(Parent):<br>
def cprt(self):<br>
print(self)<br>
c = Child()<br>
c.cprt()<br>
c.pprt()<br>
p = Parent()<br>
p.pprt()<br>
运行结果如下</p>
<p>&lt;<strong>main</strong>.Child object at 0x0000000002A47080&gt;<br>
&lt;<strong>main</strong>.Child object at 0x0000000002A47080&gt;<br>
&lt;<strong>main</strong>.Parent object at 0x0000000002A47240&gt;<br>
解释：<br>
运行c.cprt()时应该没有理解问题，指的是Child类的实例。<br>
但是在运行c.pprt()时，等同于Child.pprt(c)，所以self指的依然是Child类的实例，由于self中没有定义pprt()方法，所以沿着继承树往上找，发现在父类Parent中定义了pprt()方法，所以就会成功调用。</p>
<p>在描述符类中，self指的是描述符类的实例<br>
不太容易理解，先看实例：</p>
<p>class Desc:<br>
def <strong>get</strong>(self, ins, cls):<br>
print('self in Desc: %s ' % self )<br>
print(self, ins, cls)<br>
class Test:<br>
x = Desc()<br>
def prt(self):<br>
print('self in Test: %s' % self)<br>
t = Test()<br>
t.prt()<br>
t.x<br>
运行结果如下：</p>
<p>self in Test: &lt;<strong>main</strong>.Test object at 0x0000000002A570B8&gt;<br>
self in Desc: &lt;<strong>main</strong>.Desc object at 0x000000000283E208&gt;<br>
&lt;<strong>main</strong>.Desc object at 0x000000000283E208&gt; &lt;<strong>main</strong>.Test object at 0x0000000002A570B8&gt; &lt;class '<strong>main</strong>.Test'&gt;<br>
大部分童鞋开始有疑问了，为什么在Desc类中定义的self不是应该是调用它的实例t吗？怎么变成了Desc类的实例了呢？<br>
注意：此处需要睁大眼睛看清楚了，这里调用的是t.x，也就是说是Test类的实例t的属性x，由于实例t中并没有定义属性x，所以找到了类属性x，而该属性是描述符属性，为Desc类的实例而已，所以此处并没有顶用Test的任何方法。<br>
那么我们如果直接通过类来调用属性x也可以得到相同的结果。<br>
下面是把t.x改为Test.x运行的结果。</p>
<p>self in Test: &lt;<strong>main</strong>.Test object at 0x00000000022570B8&gt;<br>
self in Desc: &lt;<strong>main</strong>.Desc object at 0x000000000223E208&gt;<br>
&lt;<strong>main</strong>.Desc object at 0x000000000223E208&gt; None &lt;class '<strong>main</strong>.Test'&gt;<br>
题外话：由于在很多时候描述符类中仍然需要知道调用该描述符的实例是谁，所以在描述符类中存在第二个参数ins，用来表示调用它的类实例，所以t.x时可以看到第三行中的运行结果中第二项为&lt;main.Test object at 0x0000000002A570B8&gt;。而采用Test.x进行调用时，由于没有实例，所以返回None。</p>
<p>总结<br>
self在定义时需要定义，但是在调用时会自动传入。<br>
self的名字并不是规定死的，但是最好还是按照约定是用self<br>
self总是指调用时的类的实例。<br>
以上所有代码在Python3.4中均测试通过。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[函数作用域的LEGB顺序]]></title>
        <id>https://imenghu.github.io/post/han-shu-zuo-yong-yu-de-legb-shun-xu</id>
        <link href="https://imenghu.github.io/post/han-shu-zuo-yong-yu-de-legb-shun-xu">
        </link>
        <updated>2019-11-07T05:19:14.000Z</updated>
        <content type="html"><![CDATA[<p>1.什么是LEGB？<br>
L:local 函数内部作用域<br>
E:enclosing 函数内部与内嵌函数之间<br>
G:global 全局作用域<br>
B:build-in 内置作用域</p>
<p>2.它们是作什么用的<br>
为什么非要介绍这个呢?或者说它们的作用是什么?<br>
原因是因为我们的在学习Python函数的时候，经常会遇到很多定义域的问题，全部变量，内部变量，内部嵌入的函数，等等，Python是如何查找的呢？以及Python又是按照什么顺序来查找的呢？这里做一个顺序的说明</p>
<p>3.顺序是什么<br>
跟名字一样，Python在函数里面的查找分为4种，称之为LEGB，也正是按照这种顺序来查找的。</p>
<p>首先，是local,先查找函数内部<br>
然后，是enclosing，再查找函数内部与嵌入函数之间（是指在函数内部再次定义一个函数）<br>
其次，是global，查找全局<br>
最后，是build-in，内置作用域</p>
<p>4.举例说明<br>
ex1</p>
<p>复制代码<br>
1 passline = 60<br>
2<br>
3 def func(val):<br>
4     if val &gt;= passline:<br>
5         print('pass')<br>
6     else:<br>
7         print('failed')<br>
8<br>
9 func(89)<br>
10<br>
11 ''''''''''''<br>
12 pass<br>
13 [Finished in 0.2s]<br>
14 ''''''''''''<br>
复制代码</p>
<p>Python函数首先查找local，在局部变量作用域里并没有passline的定义，然后发现函数内部并没有内嵌函数，这时Python开始查找global，在全局里查找到passline的定义，被调用。</p>
<p>ex2</p>
<p>复制代码<br>
1 def Max(val1, val2):<br>
2     return max(val1, val2)<br>
3<br>
4 print(Max(90, 100))<br>
5<br>
6 '''''''''<br>
7 100<br>
8 [Finished in 0.1s]<br>
9 '''''''''<br>
复制代码</p>
<p>Max函数里面直接调用另外一个函数，调用的max()（注意两个函数的大小写不一样）,该函数并没有被定义，但是却属于我们上述的第四种，属于build-in函数，既是在python标准库里的函数，内置的，可以直接调用的。最后一步才会查找到这里</p>
<p>关于第二种，属于内嵌函数，即使在函数里面再次定义一个函数，这时会首先查找local函数里面是否有定义，然后才会查找函数里面内嵌函数里面有没有定义，这一种有专门的名词，叫做闭包，闭包将在另外文章里专门写到</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 中类的作用域问题]]></title>
        <id>https://imenghu.github.io/post/python-zhong-lei-de-zuo-yong-yu-wen-ti</id>
        <link href="https://imenghu.github.io/post/python-zhong-lei-de-zuo-yong-yu-wen-ti">
        </link>
        <updated>2019-11-07T03:30:28.000Z</updated>
        <content type="html"><![CDATA[<p>今天写一段小代码的时候犯傻了，我试图在类中的方法内部直接访问类中的变量，大概是这样写的：</p>
<pre><code class="language-python">class Test:
    a = 1

    def __init__(self):
        print(a)

t = Test()

</code></pre>
<p>&quot;&quot;&quot;<br>
NameError: name 'a' is not defined<br>
&quot;&quot;&quot;<br>
很显然报了 NameError 错误，我错误地认为 <strong>init</strong> 方法里面是可以直接拿到类中定义的变量 a 的，实际上并不可以。<br>
如大家所知，Python 的作用域查找顺序是 LEGB，即局部作用域、外部作用域、全局作用域和内置作用域，这里面并不包含 C（类作用域）。<br>
下面引用来自《Python 学习手册》第 859 页的一段话来说明这一点：</p>
<p>** 尽管类能够访问外层函数的作用域，但它们不能作为类中其它代码的外层作用域：Python 搜索外层函数来访问被引用的名称，但从来不会搜索外层类。也就是说，类是一个可以访问其外层作用域的局部作用域，但其本身却不能作为一个外层作用域被访问。因为方法函数中对名称的搜索跳过了外层的类，所以类属性必须作为对象属性并使用继承来访问。***</p>
<p>所以在上面如果要访问到 a 的话，只能通过点号取属性访问，比如 self.<strong>class</strong>.a。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sql语句之case when null 解决方法]]></title>
        <id>https://imenghu.github.io/post/sql-yu-ju-zhi-case-when-null-jie-jue-fang-fa</id>
        <link href="https://imenghu.github.io/post/sql-yu-ju-zhi-case-when-null-jie-jue-fang-fa">
        </link>
        <updated>2019-11-06T10:51:34.000Z</updated>
        <content type="html"><![CDATA[<p>//判断空值,成功!!<br>
select case<br>
when 项目名称  IS NULL<br>
then '空值'<br>
when 项目名称 ='北二环'<br>
then 'A'<br>
when 项目名称 ='北三环'<br>
then 'B'<br>
else 'C'<br>
END  项目名称<br>
from   物件设计数量统计表</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[修改python ide 自动补全的间隔时间]]></title>
        <id>https://imenghu.github.io/post/xiu-gai-python-ide-zi-dong-bu-quan-de-jian-ge-shi-jian</id>
        <link href="https://imenghu.github.io/post/xiu-gai-python-ide-zi-dong-bu-quan-de-jian-ge-shi-jian">
        </link>
        <updated>2019-11-04T09:54:07.000Z</updated>
        <content type="html"><![CDATA[<p>修改python ide  自动补全的间隔时间:</p>
<p>改 Python\Python36\Lib\idlelib\ config-extensions.def 的</p>
<p>[AutoComplete]</p>
<p>popupwait= 2000</p>
<p>为:</p>
<p>[AutoComplete]</p>
<p>popupwait= 500</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP请求流程]]></title>
        <id>https://imenghu.github.io/post/http-qing-qiu-liu-cheng</id>
        <link href="https://imenghu.github.io/post/http-qing-qiu-liu-cheng">
        </link>
        <updated>2019-11-01T09:23:42.000Z</updated>
        <content type="html"><![CDATA[<p>名词解析：</p>
<p>1：AppDomain—应用程序域，它是一个应用程序在其中执行的独立环境</p>
<p>2：w3wp.exe和aspnet_wp.exe—IIS6.0/IIS5.0 ASP.NET程序运行的必须进程</p>
<p>3：aspnet_isapi.dll—处理aspx等文件的执行文件</p>
<p>4：Managed Modules—托管模块</p>
<p>5: Handlers—处理程序</p>
<p>一：在操作系统启动的时候 ，IIS首先在HTTP.SYS中注册自己的虚拟路径</p>
<p>1：访问不到的URL或者文件，出现404错误，将错误信息返回给客户端。</p>
<p>2：如果请求可访问的URL，HTTP.SYS将请求交给IIS工作者进程w3wp.exe</p>
<figure data-type="image" tabindex="1"><img src="https://images.cnblogs.com/cnblogs_com/freegarden/clip_image002.gif" alt=""></figure>
<p>二：ISAPI（INTERNET SERVER APPLICATION PROGRAME INTERFACE）</p>
<pre><code>互联网服务器应用程序接口的工作如下：
</code></pre>
<p>1：映射文件与其对应的处理程序</p>
<p>1：从HTTP.SYS获取当期请求的信息，保存在HttpWorkerRequest类中</p>
<p>2：在相互隔离的AppDoamin中加载HttpRuntime</p>
<p>3：调用HttpRunTime的ProcessRequest(HttpWorkerRequest wr)方法</p>
<p>三：当请求进入HttpRunTime后，管道由Managed Modules和Handler组成，由它们处理这个HTTP请求</p>
<ol>
<li>
<p>HttpRuntime将Http请求转交给 HttpApplication，HttpApplication代表着程序员创建的Web应用程序。HttpApplication创建针对此Http请求的 HttpContext对象，这些对象包含了关于此请求的诸多其他对象，主要是HttpRequest、HttpResponse、HttpSessionState等。这些对象在程序中可以通过Page类或者Context类进行访问。、</p>
</li>
<li>
<p>接下来Http请求通过一系列Module，这些Module对Http请求具有完全的控制权。这些Module可以做一些执行某个实际工作前的事情。</p>
</li>
<li>
<p>Http请求经过所有的Module之后，它会被HttpHandler处理。在这一步，执行实际的一些操作，通常也就是.aspx页面所完成的业务逻辑。可能你会觉得在创建.aspx页面并没有体会到这一过程，但是，你一定知道，.aspx 页面继承自Page类，我们看一下Page类的签名： public class Page : TemplateControl, IHttpHandler{ // 代码省略}</p>
</li>
</ol>
<p>4：Handler处理完以后，请求再一次回到Module，此时Module可以做工作之后的事情</p>
<p>四:运行程序员编写的代码完成工作，IIS接收返回的数据流，交给HTTP.SYS，由HTTP.SYS将数据返回给客户端,整个请求完成。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 连接sqlserver]]></title>
        <id>https://imenghu.github.io/post/python-lian-jie-sqlserver</id>
        <link href="https://imenghu.github.io/post/python-lian-jie-sqlserver">
        </link>
        <updated>2019-11-01T07:41:31.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python">import pymssql
class linkDB():
    def linkdb():
        #数据库远程连接
        conn = pymssql.connect(host=&quot;数据库IP地址:端口号&quot;,user=&quot;用户名&quot;,password=&quot;密码&quot;,database=&quot;数据库名&quot;,charset=&quot;utf8&quot;)
        #使用cursor()方法获取操作游标
        cursor = conn.cursor()
        #查询语句
        sql = &quot;这里面是sql语句&quot;
        try:
            cursor.execute(sql)  #游标
            result = cursor.fetchall() #查询
            print(result)
        except:
            print(&quot;连接数据库报错了！&quot;)
        #关闭数据库连接
        conn.close()

if __name__ == '__main__':
    linkDB.linkdb()

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django2.0入门教程:Django常用命令]]></title>
        <id>https://imenghu.github.io/post/django20-ru-men-jiao-cheng-django-chang-yong-ming-ling</id>
        <link href="https://imenghu.github.io/post/django20-ru-men-jiao-cheng-django-chang-yong-ming-ling">
        </link>
        <updated>2019-11-01T06:16:02.000Z</updated>
        <content type="html"><![CDATA[<p>安装Django：	pip install django  指定版本 pip3 install django==2.0</p>
<p>新建项目：	django-admin.py startproject mysite</p>
<p>新建APP :	python manage.py startapp blog</p>
<p>启动：python manage.py runserver 8080</p>
<p>同步或者更改生成 数据库：</p>
<p>python manage.py makemigrations</p>
<p>python manage.py migrate</p>
<p>清空数据库：	python manage.py flush</p>
<p>创建管理员：	python manage.py createsuperuser</p>
<p>修改用户密码： python manage.py changepassword username</p>
<p>Django项目环境终端： python manage.py shell</p>
<p>这个命令和 直接运行 python 进入 shell 的区别是：你可以在这个 shell 里面调用当前项目的 models.py 中的 API，对于操作数据的测试非常方便。</p>
<p>更多关于Django的命令在终端输入：python manage.py 查看</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql数据库使用总结]]></title>
        <id>https://imenghu.github.io/post/mysql-shu-ju-ku-shi-yong-zong-jie</id>
        <link href="https://imenghu.github.io/post/mysql-shu-ju-ku-shi-yong-zong-jie">
        </link>
        <updated>2019-11-01T06:09:48.000Z</updated>
        <content type="html"><![CDATA[<p>本文主要记录一些mysql日常使用的命令，供以后查询。<br>
1.更改root密码<br>
mysqladmin -uroot password 'yourpassword'<br>
2.远程登陆mysql服务器<br>
mysql -uroot -p -h192.168.137.10 -P3306<br>
3.查询数据库<br>
show databases;<br>
4.进入某个数据库<br>
use databasename;<br>
5.列出数据库中的表<br>
show tables;<br>
6.查看某个表全部字段<br>
desc slow_log;<br>
show create table slow_log\G; （不仅可以显示表信息，还可以显示建表语句）<br>
7.查看当前用户<br>
select user();<br>
8.查看当前所在数据库<br>
select database();<br>
9.创建新数据库（可以指定字符集）<br>
create database db1 charset utf8;<br>
10.创建新表<br>
create table t1 (<code>id</code> int(4), <code>name</code> char(40));<br>
11.查看数据库版本<br>
select version();<br>
12.查看数据库状态<br>
show status;         当前会话状态<br>
show global status;  全局数据库状态<br>
show slave status\G;   查看主从数据库状态信息<br>
13.查询数据库参数<br>
show variables;<br>
14.修改数据库参数<br>
show variables like 'max_connect%';<br>
set global max_connect_errors = 1000;（重启数据库会失效，要在配置文件中修改）<br>
15.查看当前数据库队列<br>
show processlist;<br>
16.创建普通用户并授权给某个数据库<br>
grant all on databasename.* to 'user1'@'localhost' identified by '123456';<br>
17.查询表数据<br>
select * from mysql.db;           //查询该表中的所有字段<br>
select count(<em>) from mysql.user;  //count(</em>)表示表中有多少行<br>
select db,user  from mysql.db;    //查询表中的多个字段<br>
select * from mysql.db where host like '10.0.%';在查询语句中可以使用万能匹配 “%”<br>
18.插入一行数据<br>
insert into db1.t1 values (1, 'abc');<br>
19.更改表的某一行数据<br>
update db1.t1 set name='aaa' where id=1;<br>
20.清空表数据<br>
truncate table db1.t1;<br>
21.删除表<br>
drop table db1.t1;<br>
22.清空数据库中的所有表（数据库名是eab12）<br>
mysql -N -s information_schema -e &quot;SELECT CONCAT('TRUNCATE TABLE ',TABLE_NAME,';') FROM TABLES WHERE TABLE_SCHEMA='eab12'&quot; | mysql -f eab12<br>
23.删除数据库<br>
drop database db1;<br>
24.数据库备份<br>
mysqldump  -uroot -p'yourpassword' mysql &gt;/tmp/mysql.sql<br>
25.数据库恢复<br>
mysql -uroot -p'yourpassword' mysql &lt;/tmp/mysql.sql<br>
26.新建普通用户<br>
CREATE USER name IDENTIFIED BY 'ssapdrow';<br>
27.更改普通用户密码<br>
SET PASSWORD FOR name=PASSWORD('fdddfd');<br>
28.查看name用户权限<br>
SHOW GRANTS FOR name;<br>
29.脚本中执行mysql命令<br>
mysql -uuser -ppasswd -e&quot;show databases&quot;<br>
echo &quot;show databases&quot;|mysql -uuser -ppassword<br>
以下是执行大量mysql语句采用的方式<br>
mysql -uuser -hhostname -ppasswd &lt;&lt;EOF<br>
mysql语句<br>
EOF</p>
]]></content>
    </entry>
</feed>