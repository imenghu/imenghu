<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://imenghu.github.io</id>
    <title>i萌虎</title>
    <updated>2019-11-21T11:22:28.790Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://imenghu.github.io"/>
    <link rel="self" href="https://imenghu.github.io/atom.xml"/>
    <logo>https://imenghu.github.io/images/avatar.png</logo>
    <icon>https://imenghu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, i萌虎</rights>
    <entry>
        <title type="html"><![CDATA[解读Python编程中的命名空间与作用域]]></title>
        <id>https://imenghu.github.io/post/jie-du-python-bian-cheng-zhong-de-ming-ming-kong-jian-yu-zuo-yong-yu</id>
        <link href="https://imenghu.github.io/post/jie-du-python-bian-cheng-zhong-de-ming-ming-kong-jian-yu-zuo-yong-yu">
        </link>
        <updated>2019-11-21T11:20:16.000Z</updated>
        <content type="html"><![CDATA[<p>变量是拥有匹配对象的名字（标识符）。命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。<br>
一个Python表达式可以访问局部命名空间和全局命名空间里的变量。如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。<br>
每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。<br>
Python会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。<br>
因此，如果要给全局变量在一个函数里赋值，必须使用global语句。<br>
global VarName的表达式会告诉Python， VarName是一个全局变量，这样Python就不会在局部命名空间里寻找这个变量了。</p>
<p>命名空间的定义<br>
Python命名空间是名称到对象的映射，这就像是字典，键名是变量名，值是变量的值。比如：</p>
<blockquote>
<blockquote>
<blockquote>
<p>x = 3<br>
globals()<br>
{'<strong>builtins</strong>': &lt;module '<strong>builtin</strong>' (built-in)&gt;, '<strong>name</strong>': '<strong>main</strong>', '<strong>doc</strong>': None, 'x': 3, '<strong>package</strong>': None}</p>
</blockquote>
</blockquote>
</blockquote>
<p>可以看到变量x，3以字典的形式存放在globals空间内。以之对应的名字空间还有：locals()。</p>
<blockquote>
<blockquote>
<blockquote>
<p>locals()<br>
{'<strong>builtins</strong>': &lt;module '<strong>builtin</strong>' (built-in)&gt;, '<strong>name</strong>': '<strong>main</strong>', '<strong>doc</strong>': None, 'x': 3, '<strong>package</strong>': None}</p>
</blockquote>
</blockquote>
</blockquote>
<p>实际上，你可以通过向名字添加键名和值：</p>
<blockquote>
<blockquote>
<blockquote>
<p>globals()['y'] = 5<br>
y<br>
5</p>
</blockquote>
</blockquote>
</blockquote>
<p>上图左侧是内置命名空间，右侧是不同的模块，有各自的全局命名空间，全局命名空间内定义函数就会有局部命名空间。</p>
<p>命名空间的种类<br>
Python中有三种命名空间：</p>
<p>a) 局部，函数内的命名空间就是局部的；<br>
b) 全局，模块内的命名空间就是全局的；</p>
<p>c) 内置，包括异常类型、内建函数和特殊方法，可以代码中任意地方调用；<br>
下面讨论关于名字空间的搜索顺序，先来看张图：</p>
<figure data-type="image" tabindex="1"><img src="https://img2.mukewang.com/5af99a370001f46803670254.jpg" alt=""></figure>
<p>命名空间的可见性（作用域）</p>
<p>a) 内置命名空间在代码所有位置都是可见的，所以可以随时被调用；</p>
<p>b) 全局命名空间和局部命名空间中， 如果有同名变量，在全局命名空间处，局部命名空间内的同名变量是不可见的；</p>
<p>c) 在局部命名空间处，全局命名空间的同名变量是不可见的（只有变量不同名的情况下，可使用 global关键字让其可见）。</p>
<p>知道了可见性，下面说变量的查找顺序就要清楚多了。</p>
<p>命名空间的查找顺序<br>
a) 如果在函数内调用一个变量，先在函数内（局部命名空间）查找，如果找到则停止查找。否则在函数外部（全局命名空间）查找，如果还是没找到，则查找内置命名空间。如果以上三个命名都未找到，则抛出NameError 的异常错误。<br>
b) 如果在函数外调用一个变量，则在函数外查找（全局命名空间，局部命名空间此时不可见），如果找到则停止查找，否则到内置命名空间中查找。如果两者都找不到，则抛出异常。只有当局部命名空间内，使用global 关键字声明了一个变量时，查找顺序则是 a) 的查找顺序。</p>
<p>为了帮助理解，来举个例子，我们在全局命名空间里定义一个变量money。我们再在函数内给变量money赋值，然后Python会假定money是一个局部变量。然而，我们并没有在访问前声明一个局部变量money，结果就是会出现一个UnboundLocalError的错误。取消global语句的注释就能解决这个问题。</p>
<p>#!/usr/bin/python</p>
<h1 id="-coding-utf-8-">-<em>- coding: UTF-8 -</em>-</h1>
<p>Money = 2000<br>
def AddMoney():</p>
<h1 id="想改正代码就取消以下注释">想改正代码就取消以下注释:</h1>
<h1 id="global-money">global Money</h1>
<p>Money = Money + 1</p>
<p>print Money<br>
AddMoney()<br>
print Money</p>
<p>dir()函数<br>
dir()函数一个排好序的字符串列表，内容是一个模块里定义过的名字。<br>
返回的列表容纳了在一个模块里定义的所有模块，变量和函数。如下一个简单的实例：<br>
#!/usr/bin/python</p>
<h1 id="-coding-utf-8--2">-<em>- coding: UTF-8 -</em>-</h1>
<h1 id="导入内置math模块">导入内置math模块</h1>
<p>import math</p>
<p>content = dir(math)</p>
<p>print content;</p>
<p>以上实例输出结果：<br>
['<strong>doc</strong>', '<strong>file</strong>', '<strong>name</strong>', 'acos', 'asin', 'atan',<br>
'atan2', 'ceil', 'cos', 'cosh', 'degrees', 'e', 'exp',<br>
'fabs', 'floor', 'fmod', 'frexp', 'hypot', 'ldexp', 'log',<br>
'log10', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh',<br>
'sqrt', 'tan', 'tanh']</p>
<p>在这里，特殊字符串变量__name__指向模块的名字，__file__指向该模块的导入文件名。</p>
<p>globals()和locals()函数</p>
<pre><code>根据调用地方的不同，globals()和locals()函数可被用来返回全局和局部命名空间里的名字。
如果在函数内部调用locals()，返回的是所有能在该函数里访问的命名。
如果在函数内部调用globals()，返回的是所有在该函数里能访问的全局名字。
两个函数的返回类型都是字典。所以名字们能用keys()函数摘取。
</code></pre>
<p>reload()函数<br>
当一个模块被导入到一个脚本，模块顶层部分的代码只会被执行一次。<br>
因此，如果你想重新执行模块里顶层部分的代码，可以用reload()函数。该函数会重新导入之前导入过的模块。语法如下：<br>
reload(module_name) 厦工叉车<br>
在这里，module_name要直接放模块的名字，而不是一个字符串形式。比如想重载hello模块，如下：<br>
reload(hello)</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[windows常用cmd命令]]></title>
        <id>https://imenghu.github.io/post/windows-chang-yong-cmd-ming-ling</id>
        <link href="https://imenghu.github.io/post/windows-chang-yong-cmd-ming-ling">
        </link>
        <updated>2019-11-21T08:47:29.000Z</updated>
        <content type="html"><![CDATA[<p>windows常用cmd命令</p>
<ul>
<li>常用基本命令</li>
<li>辅助符号或命令</li>
<li>常用工具</li>
<li>验证考核<br>
常用基本命令：netstat，find，ping，cd，辅助符号或命令：Ctrl+C、cls、|、&gt;、向上的箭头键等，常用工具: Process Explorer。</li>
</ul>
<p>建议掌握这些命令获取帮助的方式，一般都是 ”命令 /?“ 或者“命令 -help”，如“cd /?”，能看懂命令帮助提示(根据帮助尝试使用)。</p>
<p>常用基本命令<br>
1，列出所有任务及进程号，杀进程</p>
<pre><code> tasklist

 tasklist /?  获取使用帮助

 taskkill

 taskkill /?  获取使用帮助
</code></pre>
<p>2，cd 切换目录</p>
<pre><code> cd /？ 获取使用帮助

 跳转到当前驱动器的根目录

      cd [当前驱动器盘符]:\    例如： cd c:\ ，或者更简单的   cd\

 跳转到当前驱动器的其他文件夹

      以C盘下的WINDOWS文件夹为例，输入：cd C:\WINDOWS

 跳转到其他驱动器

      以从C盘跳转到D盘为例 在任意目录下直接输入：  D:

 跳转到其他驱动器的其他文件夹

      假设当前在C盘，要跳转到E的software目录    cd /d e:\software

      注意此处必须加/d参数。否则无法跳转。

 跳转到上一层目录

      cd..
</code></pre>
<p>3，netstat 查看网络连接状态</p>
<pre><code> 显示协议统计信息和当前 TCP/IP 网络连接。该命令可以查看当前机器建立的所有网络链接状态，以及对应哪个进程。

 netstat -help 获取命令行使用帮助信息

 例子:netstat -ano  查看网络连接、状态以及对应的进程id
</code></pre>
<p>4，find</p>
<pre><code> 常用于某个命令输出结果太多，需要模糊搜索我们关心的内容时使用，一般辅助|使用（|代表前一个输出作为后一个的输入）

 find /？获取使用帮助

 如果是linux就是grep，搜索特定字符

 例子：netstat -ano|find &quot;.8&quot;
</code></pre>
<p>5，ping</p>
<pre><code> ping -help
</code></pre>
<p>6，tracert</p>
<pre><code> tracert也被称为Windows路由跟踪实用程序，在命令提示符（cmd）中使用tracert命令可以用于确定IP数据包访问目标时所选择的路径。

 tracert /? 获取使用帮助

 例子：tracert www.baidu.com
</code></pre>
<p>辅助符号或命令<br>
7，“|”cmd命令中|代表前一个的输出代表后一个的输入</p>
<pre><code> 查找特定ip的网络连接及进程号：netstat -ano|find &quot;192.168.1.10&quot;  
</code></pre>
<p>8，重定向输出符号&gt; &gt;&gt;</p>
<pre><code> 将原本输出到命令窗口的内容，转存到文件中，如jstack 12912 &gt;d:/s.txt  打印线程到指定文件

 cmd &gt;重定向输出并覆盖源文件。

      例如

      echo hello &gt;c:\1.txt

      1.txt的文件内容先被清空，然后写入hello。

 cmd &gt;&gt;重定向输出追加到文件末尾

      例如：

      echo hello &gt;c:\1.txt

      在1.txt文件末尾加上hello
</code></pre>
<p>9，重定向输入符号&lt; &lt;&lt;</p>
<pre><code> cmd &lt; file

      使cmd命令从file读入

 cmd &lt;&lt; text

      从命令行读取输入，直到一个与text相同的行结束。除非使用引号把输入括起来，此模式将对输入内容进行shell变量替换。如果使用 &lt;&lt;- ，则会忽略接下来输入行首的tab，结束行也可以是一堆tab再加上一个与text相同的内容，可以参考后面的例子。

 cmd &lt;&lt;&lt; word

      把word（而不是文件word）和后面的换行作为输入提供给cmd。

 cmd &lt;&gt; file

      以读写模式把文件file重定向到输入，文件file不会被破坏。仅当应用程序利用了这一特性时，它才是有意义的。

 cmd &gt;| file

      功能同&gt;，但即便在设置了noclobber时也会覆盖file文件，注意用的是|而非一些书中说的!，目前仅在csh中仍沿用&gt;!实现这一功能。 
</code></pre>
<p>10，终止一直在运行的命令ctrl+c</p>
<pre><code> 有时某个命令一直打印输出结果(如ping 192.168.1.10 -t)，我们想终止这个命令的执行，直接按ctrl+c即可。
</code></pre>
<p>11，清空cmd窗口内容命令cls</p>
<pre><code> 有时cmd内容太多，滚动费尽，需要清空屏幕内容，直接输入cls即可
</code></pre>
<p>12，cmd命令中，按键盘的向上箭头可以直接复制前一个命令</p>
<p>常用工具<br>
13，常用工具</p>
<pre><code> Process Explorer，查询进程的详细信息，如查询java进程启动参数，运行环境，线程信息、网络连接信息、使用了哪些dll，打开了什么句柄。包含注册表、Socket、文件等等。

 下载地址：https://docs.microsoft.com/en-us/sysinternals/downloads/process-explorer
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://imenghu.github.io/post-images/1574326094006.png" alt=""></figure>
<p>验证考核<br>
1，浏览器访问任何一个域名网站（如百度），然后使用cmd命令查找到本机到这个网站的网络连接状态</p>
<pre><code> 2，持续ping100次www.baidu.com,并且输出到d:/pingbaidu.txt

 3，假如不通过环境变量中的java相关命令如jps、java， 而是希望使用你机器上装的某个版本jdk中命令jstack.exe（如装在D:\Program Files\java\jdk1.8.0_101），你会怎么做？

 4，你机器上已经启动了一个smartbi，请告知如何确认jvm所有启动参数</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[javascript 作用域详解]]></title>
        <id>https://imenghu.github.io/post/javascript-zuo-yong-yu-xiang-jie</id>
        <link href="https://imenghu.github.io/post/javascript-zuo-yong-yu-xiang-jie">
        </link>
        <updated>2019-11-19T06:58:14.000Z</updated>
        <content type="html"><![CDATA[<p>作用域理解：定义的变量、函数生效的范围。javascript 有全局作用域和函数作用域两种。</p>
<p>注：es6实现let 块级作用域不是js原生的，底层同样是通过var实现的。如果想了解具体细节，请访问babel官方 对es6中let 进行解析。</p>
<p>执行上下文<br>
范围：一段内或者一个函数内；<br>
全局：函数声明、变量声明 。范围：；<br>
函数：函数声明、变量声明、this、arguments。范围：一个函数内部；</p>
<p><strong>函数、变量声明提升</strong></p>
<pre><code class="language-javascript">&lt;script&gt;

        foo(); //打印a

        var foo = 1;

        function foo (){

            console.log(’a‘)

        }；

        console.log(foo); //1

&lt;/script&gt;

//实际的执行顺序为

&lt;script&gt;

        function foo(){  //函数声明优先于变量的声明

            console.log(&quot;a&quot;);

        }

        //var a ;  重复声明，这儿被省略了。

        foo(); //打印a

        foo = 1;  //给foo赋值为1

        console.log(foo); //1

&lt;/script&gt;
</code></pre>
<p>当js引擎执行一个 执行上下文代码块时，执行顺序为：</p>
<ol>
<li>函数声明 function a(){};(函数优先) 注：let a = function (){}; 这是变量的声明和赋值，不是函数的声明。</li>
<li>变量声明 var a; 注：刚开始只对变量进行声明，没有进行赋值，如果 在赋值之前使用到这个变量 值为：undefined。</li>
<li>执行上下文为函数作用域时：确定this和arguments。</li>
<li>按照js单线程和异步策略依次执行 作用域中的代码。</li>
</ol>
<p>我们习惯将 var a = 2; 看作一个声明，而实际上 JavaScript 引擎并不这么认为。它将 var a和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程被称为提升。要注意避免重复声明，特别是当普通的 var 声明和函数声明混合在一起的时候，否则会引起很多危险的问题！</p>
<p><strong>作用域链</strong><br>
自由变量：当前作用域没有定义的变量，但是上层作用域定义了，可以在此层作用域中使用的变量。<br>
作用域链：当使用一个变量时候，先在自己的作用域里找，如果没有找到，再到父级作用域找，一直找到全局作用域，如果都没有找到即报错。</p>
<p><strong>块级作用域</strong><br>
js无块级作用域，仅有全局作用域和函数作用域两种作用域。<br>
ES6 通过对全局作用域的特殊实现，实现了js的块级作用域 let；<br>
let 的生效范围为 { }；<br>
const 为定义常量。注：定义的常量的值存储的内存地址不可变动，值是可变的比如常量中定义的是数组 或者对象时候，可以通过数组或对象方法操作原数据，只要不重新赋值就没问题</p>
<center>-END-</center>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python中的类属性和对象属性的作用域]]></title>
        <id>https://imenghu.github.io/post/python-zhong-de-lei-shu-xing-he-dui-xiang-shu-xing-de-zuo-yong-yu</id>
        <link href="https://imenghu.github.io/post/python-zhong-de-lei-shu-xing-he-dui-xiang-shu-xing-de-zuo-yong-yu">
        </link>
        <updated>2019-11-19T04:58:47.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://imenghu.github.io/post-images/1574139587626.png" alt=""></figure>
<pre><code class="language-python">class Test:
    num=100 
    def __init__(self):
        self.age=18     

test1=Test()
test2=Test()
print(test1.num)    
test1.num=200  
&quot;&quot;&quot;
只是修改了这个对象作用域下的属性    
类中的num不会发生改变
&quot;&quot;&quot;
print(test1.num)   
print(Test.num)    
del test1.num       
print(test1.num)
</code></pre>
<p>def __init__方法的作用域限制在实例化出的对象<br>
self.age=18<br>
这里的age属性是对象的特有属性，类访问不到<br>
跟 p=person()<br>
p.age=18<br>
是一样的效果<br>
只有p能访问到这个age，person访问不到<br>
如果person中也有这个age，是在两个区域，互不影响<br>
除非在p中的age属性删除之后，p会向person中找相关的属性</p>
<pre><code class="language-python">class a:
    def __init__(self):
        self.name=&quot;a&quot;
        self.age=12
        self.score=23
    def test():
        print(&quot;类方法测试&quot;)
print(a.name)
&quot;&quot;&quot;
这里会报错，因为def __init__构造函数之内的属性只能通过
实例化对象之后，通过对象进行访问，类没有办法直接访问
如果是对象中再增加属性，或者修改属性的值，这些都跟类的属性没有关系
因为两种属性是在两个区域内创建的
&quot;&quot;&quot;
a.test()
</code></pre>
<p>对于类：</p>
<ol>
<li>
<p>类可以直接访问类属性</p>
</li>
<li>
<p>类不可以直接访问实例方法，必须通过实例化之后的对象来访问实例方法</p>
</li>
<li>
<p>类不可以访问对象特有的属性（比如：def __init__中定义的属性）</p>
</li>
<li>
<p>类可以直接访问类方法</p>
</li>
<li>
<p>类可以直接访问静态方法</p>
</li>
</ol>
<p>所以存在：如果对象中的属性跟类中的属性相同，改变对象中的属性值，不会影响类中的属性值</p>
<p>对于对象：</p>
<ol>
<li>
<p>对象可以直接访问类的属性（实例化过程中，类已经将属性赋给对象）</p>
</li>
<li>
<p>对象可以直接访问自己私有的属性</p>
</li>
<li>
<p>对象可以直接访问类方法</p>
</li>
<li>
<p>对象可以直接访问静态方法</p>
</li>
<li>
<p>对象可以直接访问实例方法</p>
</li>
</ol>
<pre><code class="language-python">class a:
    def __init__(self,name):
        self.name=name
        print(self.name)
    age=&quot;这是类属性&quot;
    def test(self):
        self.name=&quot;name已经修改&quot;
        self.age=&quot;age已经修改&quot;
        print(self.age)
        print(self.name)
a1=a(&quot;这是对象属性&quot;)
print(a.age)
print(a1.name)
print(a1.age)
a1.test()
</code></pre>
<p>这里所有的带有self的方法都是实例方法，只能由对象才能访问到，且实例方法中可以访问对象的属性。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C#调用python脚本]]></title>
        <id>https://imenghu.github.io/post/cdiao-yong-python-jiao-ben</id>
        <link href="https://imenghu.github.io/post/cdiao-yong-python-jiao-ben">
        </link>
        <updated>2019-11-14T05:22:27.000Z</updated>
        <content type="html"><![CDATA[<p>只尝试了两种调用方式，第一种只适用于python脚本中不包含第三方模块的情况，第二种针对的是python脚本中包含第三方模块的情况。不管哪种方式，首先都需要安装IronPython。可以在官网下载安装包自行安装后添加引用即可。<br>
C#代码</p>
<pre><code class="language-c#">using IronPython.Hosting;
using Microsoft.Scripting.Hosting;
using System;

namespace CSharpCallPython
{
    class Program
    {
        static void Main(string[] args)
        {
            ScriptEngine pyEngine = Python.CreateEngine();//创建Python解释器对象
            dynamic py = pyEngine.ExecuteFile(@&quot;test.py&quot;);//读取脚本文件
            int[] array = new int[9] { 9, 3, 5, 7, 2, 1, 3, 6, 8 };
            string reStr = py.main(array);//调用脚本文件中对应的函数
            Console.WriteLine(reStr);

            Console.ReadKey();
        }
    }
}
</code></pre>
<p>python代码</p>
<pre><code class="language-python">def main(arr):
    try:
        arr = set(arr)
        arr = sorted(arr)
        arr = arr[0:]
        return str(arr)
    except Exception as err:
        return str(err)
</code></pre>
<p><strong>注意</strong><br>
Q：找不到py文件<br>
A：检查最后执行文件路径，可能需要将文件属性中“复制到输出目录”设置为“始终复制”</p>
<p>Q：py文件方法执行异常<br>
A：检查py文件可否单独执行，如果可以执行，检查执行环境是否为3.x，可能需要py代码降级；如果不可执行，检查是否引用第三方包，第三方是否非全局安装</p>
<p>Tip：目前 IronPython 支持Python模拟运行环境为2.x</p>
<p>结果<br>
<img src="https://imenghu.github.io/post-images/1573709817355.png" alt=""></p>
<p>方式二：适用于python脚本中包含第三方模块的情况</p>
<p>C#代码</p>
<pre><code class="language-c#">using System;
using System.Collections;
using System.Diagnostics;

namespace Test
{
    class Program
    {
        static void Main(string[] args)
        {
            Process p = new Process();
            string path = &quot;reset_ipc.py&quot;;//待处理python文件的路径，本例中放在debug文件夹下
            string sArguments = path;
            ArrayList arrayList = new ArrayList();
            arrayList.Add(&quot;com4&quot;);
            arrayList.Add(57600);
            arrayList.Add(&quot;password&quot;);
            foreach (var param in arrayList)//添加参数
            {
                sArguments += &quot; &quot; + sigstr;
            }

            p.StartInfo.FileName = @&quot;D:\Python2\python.exe&quot;; //python2.7的安装路径
            p.StartInfo.Arguments = sArguments;//python命令的参数
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.RedirectStandardInput = true;
            p.StartInfo.RedirectStandardError = true;
            p.StartInfo.CreateNoWindow = true;
            p.Start();//启动进程

            Console.WriteLine(&quot;执行完毕！&quot;);

            Console.ReadKey();
        }
    }
}
</code></pre>
<p>python代码</p>
<pre><code class="language-python"># -*- coding: UTF-8 -*-
import serial
import time

def resetIPC(com, baudrate, password, timeout=0.5):
    ser=serial.Serial(com, baudrate, timeout=timeout)
    flag=True
    try:
        ser.close()
        ser.open()
        ser.write(&quot;\n&quot;.encode(&quot;utf-8&quot;))
        time.sleep(1)
        ser.write(&quot;root\n&quot;.encode(&quot;utf-8&quot;))
        time.sleep(1)
        passwordStr=&quot;%s\n&quot; % password
        ser.write(passwordStr.encode(&quot;utf-8&quot;))
        time.sleep(1)
        ser.write(&quot;killall -9 xxx\n&quot;.encode(&quot;utf-8&quot;))
        time.sleep(1)
        ser.write(&quot;rm /etc/xxx/xxx_user.*\n&quot;.encode(&quot;utf-8&quot;))
        time.sleep(1)
        ser.write(&quot;reboot\n&quot;.encode(&quot;utf-8&quot;))
        time.sleep(1)
    except Exception:
        flag=False
    finally:
        ser.close()
    return flag

resetIPC(sys.argv[1], sys.argv[2], sys.argv[3])
</code></pre>
<p>上面的python脚本实现的是重启IPC设备，测试功能成功。</p>
<p><strong>调用包含第三方模块的python脚本时，尝试过使用path.append()方式，调试有各种问题，最终放弃了，没有研究。</strong></p>
<p><a href="https://github.com/imenghu/CSharpCallPython.git">git地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[getattr,setattr,hasattr详解]]></title>
        <id>https://imenghu.github.io/post/getattrsetattrhasattr-xiang-jie</id>
        <link href="https://imenghu.github.io/post/getattrsetattrhasattr-xiang-jie">
        </link>
        <updated>2019-11-13T01:25:12.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li><strong>hasattr(object, name)</strong></li>
</ol>
<p>判断一个对象里面是否有name属性或者name方法，返回BOOL值，有name特性返回True， 否则返回False。<br>
需要注意的是name要用括号括起来。</p>
<p>实例：<br>
<img src="https://img-blog.csdn.net/20181015192304290?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JvdGVtYW4xMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<ol start="2">
<li><strong>getattr(object, name[,default])</strong></li>
</ol>
<p>获取对象object的属性或者方法，如果存在打印出来，如果不存在，打印出默认值，默认值可选。<br>
需要注意的是，如果是返回的对象的方法，返回的是方法的内存地址，如果需要运行这个方法，<br>
可以在后面添加一对括号。</p>
<p>实例：<br>
<img src="https://img-blog.csdn.net/20181015192352956?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JvdGVtYW4xMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<ol start="3">
<li><strong>setattr(object, name, values)</strong></li>
</ol>
<p>给对象的属性赋值，若属性不存在，先创建再赋值。<br>
<img src="https://img-blog.csdn.net/20181015192503188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JvdGVtYW4xMjM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python 中的两个函数dir,help]]></title>
        <id>https://imenghu.github.io/post/python-zhong-de-liang-ge-han-shu</id>
        <link href="https://imenghu.github.io/post/python-zhong-de-liang-ge-han-shu">
        </link>
        <updated>2019-11-12T01:57:04.000Z</updated>
        <content type="html"><![CDATA[<p><strong>1. dir(对象名) 查看该对象的属性和方法。</strong><br>
<strong>2. help(对象名.属性名)  查看该对象属性(方法)的具体实现</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git记忆图]]></title>
        <id>https://imenghu.github.io/post/git-ji-yi-tu</id>
        <link href="https://imenghu.github.io/post/git-ji-yi-tu">
        </link>
        <updated>2019-11-12T01:18:13.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://imenghu.github.io/post-images/1573521529589.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解读Python的命名空间]]></title>
        <id>https://imenghu.github.io/post/jie-du-python-de-ming-ming-kong-jian</id>
        <link href="https://imenghu.github.io/post/jie-du-python-de-ming-ming-kong-jian">
        </link>
        <updated>2019-11-08T02:29:14.000Z</updated>
        <content type="html"><![CDATA[<p>前面我们理解了变量、函数的作用域，现在我们再深入讨论一下Python是如何给变量、函数划分作用域的。</p>
<p>我们在编写Python程序的过程中，如果要使用变量和函数，都需要先对变量和函数命名后才能使用。Python会把命名后的变量和函数分配到不同的命名空间，并通过名称来识别它们。Python为什么要区分不同的命名空间呢？它有两个作用：一个作用是不同的命名空间对应不同的作用域；另外一个作用是防止命名冲突。</p>
<p>我们先来看第一个作用。前面我们已经知道了在函数内部声明的变量属于局部变量，在模块内部声明的变量属于全局变量。Python是如何确定哪个变量是属于全局还是局部呢？这就需要用到命名空间概念了。</p>
<p>Python会把在函数内部声明的变量放置到局部命名空间，把在模块声明的变量放置到全局命名空间。在局部命名空间的变量其作用域只能是在函数内部范围，在全局命名空间的变量其作用域为整个模块。函数的命名也同样适用于局部命名空间和全局命名空间，嵌套函数的命名是放置在局部命名空间的，因此其作用域只能在父函数范围；而父函数的命名是放置在全局命名空间的，因此其作用域适用于整个模块。</p>
<p>关于命名空间的作用域，这里面还有一个问题。那就是在模块或函数中使用的Python自身提供的内建函数，它是属于哪个命名空间呢？因为这些内建函数在模块中随意使用，没有作用域的限制。其实Python还为自己的函数、程序提供了一个命名空间，这个命名空间是内置命名空间，在内置命名空间放置的变量、函数，在整个Python程序模块中都可以被访问，其作用域是整个程序。</p>
<p>小结一下，在Python程序执行过程中，会有局部命名空间、全局命名空间和内建命名空间同时存在。局部命名空间记录函数内部的变量、传入函数的参数、嵌套函数等被命名的对象；全局命名空间记录模块的变量、函数、类及其它导入的模块等被命名的对象；内建命名空间记录Python自身提供的函数、模块等被命名的对象。</p>
<p>我们再来看命名空间的第二个作用。命名空间可以预防变量和函数的命名冲突。前面我们知道了Python有三类命名空间，分别是局部命名空间、全局命名空间和内建命名空间。Python在编译和解释执行Python代码的过程中，会为每个模块建立一个全局命名空间，为模块中的每个函数建立局部命名空间。相当于Python为程序的每个模块和函数提供了一个封闭的命名空间，在这个封闭的命名空间中，函数及变量命名互相不受影响，在不同的模块中可以声明相同名称的函数，在不同的函数中可以声明相同名称的变量，虽然它们的名称相同，但它们之间没有任何联系。</p>
<p>那么Python如何把已命名的变量及函数的作用域和命名空间联系起来了呢？它所要做的就是在命名空间查询变量或函数的名称。Python访问一个已命名的变量或函数时，它会从三个命名空间中查询。首先从局部命名空间开始，如果没有找到，它就会继续查找全局命名空间，如果在全局命名空间中也没找到，它将在内建命名空间里查找。如果这些查找都失败了，它将会报出下面的错误。</p>
<figure data-type="image" tabindex="1"><img src="https://imenghu.github.io/post-images/1573181566780.jpg" alt=""></figure>
<p>在Python解释器中，我们输入了foo，没有给foo进行赋值（声明变量时需要进行赋值）。解释器会从命名空间中查找foo，它先从局部空间查找，如果找到了它就会使用局部命名空间的变量foo，即使全局命名空间也有变量foo。这就很容易理解为什么在函数内部声明的局部变量会覆盖掉在模块中声明的同名变量。</p>
<p>Python提供了内建函数可以输出命名空间里面的内容。输出局部命名空间的内容使用locals()函数，输出全局命名空间的的内容使用globals()函数。</p>
<figure data-type="image" tabindex="2"><img src="https://imenghu.github.io/post-images/1573181560065.jpg" alt=""></figure>
<p>上面的代码给出了如何访问局部命名空间和全局命名空间的内容，命名空间的内容以字典形式给出，字典的key是已命名的变量或函数名称，value是这些变量或函数的值。从输出内容可以看出，局部变量的π覆盖了全局变量的π。下图是输出结果。</p>
<figure data-type="image" tabindex="3"><img src="https://imenghu.github.io/post-images/1573181574655.jpg" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一篇文章让你彻底搞清楚Python中self的含义]]></title>
        <id>https://imenghu.github.io/post/yi-pian-wen-zhang-rang-ni-che-di-gao-qing-chu-python-zhong-self-de-han-yi</id>
        <link href="https://imenghu.github.io/post/yi-pian-wen-zhang-rang-ni-che-di-gao-qing-chu-python-zhong-self-de-han-yi">
        </link>
        <updated>2019-11-07T05:40:20.000Z</updated>
        <content type="html"><![CDATA[<p>刚开始学习Python的类写法的时候觉得很是麻烦，为什么定义时需要而调用时又不需要，为什么不能内部简化从而减少我们敲击键盘的次数？<br>
你看完这篇文章后就会明白所有的疑问。</p>
<p>self代表类的实例，而非类。<br>
实例来说明</p>
<pre><code class="language-python">class Test:
    def prt(self):
        print(self)
        print(self.__class__)

t = Test()
t.prt()
</code></pre>
<p>'''<br>
执行结果如下</p>
<p>&lt;<strong>main</strong>.Test object at 0x000000000284E080&gt;<br>
&lt;class '<strong>main</strong>.Test'&gt;<br>
'''<br>
从上面的例子中可以很明显的看出，self代表的是类的实例。而self.__class__则指向类。</p>
<p>self不必非写成self<br>
有很多童鞋是先学习别的语言然后学习Python的，所以总觉得self怪怪的，想写成this，可以吗？<br>
当然可以，还是把上面的代码改写一下。</p>
<pre><code class="language-python">class Test:
    def prt(this):
        print(this)
        print(this.__class__)

t = Test()
t.prt()
</code></pre>
<p>改成this后，运行结果完全一样。<br>
当然，最好还是尊重约定俗成的习惯，使用self。</p>
<p>self可以不写吗<br>
在Python的解释器内部，当我们调用t.prt()时，实际上Python解释成Test.prt(t)，也就是说把self替换成类的实例。<br>
有兴趣的童鞋可以把上面的t.prt()一行改写一下，运行后的实际结果完全相同。<br>
实际上已经部分说明了self在定义时不可以省略，如果非要试一下，那么请看下面：</p>
<pre><code class="language-python">class Test:
    def prt():
        print(self)

t = Test()
t.prt()
</code></pre>
<p>运行时提醒错误如下：prt在定义时没有参数，但是我们运行时强行传了一个参数。<br>
由于上面解释过了t.prt()等同于Test.prt(t)，所以程序提醒我们多传了一个参数t。</p>
<p>Traceback (most recent call last):<br>
File &quot;h.py&quot;, line 6, in <module><br>
t.prt()<br>
TypeError: prt() takes 0 positional arguments but 1 was given<br>
当然，如果我们的定义和调用时均不传类实例是可以的，这就是类方法。</p>
<pre><code class="language-python">class Test:
    def prt():
        print(__class__)
Test.prt()
</code></pre>
<p>运行结果如下</p>
<p>&lt;class '<strong>main</strong>.Test'&gt;<br>
在继承时，传入的是哪个实例，就是那个传入的实例，而不是指定义了self的类的实例。<br>
先看代码</p>
<pre><code class="language-python">class Parent:
    def pprt(self):
        print(self)

class Child(Parent):
    def cprt(self):
        print(self)
c = Child()
c.cprt()
c.pprt()
p = Parent()
p.pprt()
</code></pre>
<p>运行结果如下</p>
<p>&lt;<strong>main</strong>.Child object at 0x0000000002A47080&gt;<br>
&lt;<strong>main</strong>.Child object at 0x0000000002A47080&gt;<br>
&lt;<strong>main</strong>.Parent object at 0x0000000002A47240&gt;<br>
解释：<br>
运行c.cprt()时应该没有理解问题，指的是Child类的实例。<br>
但是在运行c.pprt()时，等同于Child.pprt(c)，所以self指的依然是Child类的实例，由于self中没有定义pprt()方法，所以沿着继承树往上找，发现在父类Parent中定义了pprt()方法，所以就会成功调用。</p>
<p>在描述符类中，self指的是描述符类的实例<br>
不太容易理解，先看实例：</p>
<pre><code class="language-python">class Desc:
    def __get__(self, ins, cls):
        print('self in Desc: %s ' % self )
        print(self, ins, cls)
class Test:
    x = Desc()
    def prt(self):
        print('self in Test: %s' % self)
t = Test()
t.prt()
t.x
</code></pre>
<p>运行结果如下：</p>
<p>self in Test: &lt;<strong>main</strong>.Test object at 0x0000000002A570B8&gt;<br>
self in Desc: &lt;<strong>main</strong>.Desc object at 0x000000000283E208&gt;<br>
&lt;<strong>main</strong>.Desc object at 0x000000000283E208&gt; &lt;<strong>main</strong>.Test object at 0x0000000002A570B8&gt; &lt;class '<strong>main</strong>.Test'&gt;<br>
大部分童鞋开始有疑问了，为什么在Desc类中定义的self不是应该是调用它的实例t吗？怎么变成了Desc类的实例了呢？<br>
注意：此处需要睁大眼睛看清楚了，这里调用的是t.x，也就是说是Test类的实例t的属性x，由于实例t中并没有定义属性x，所以找到了类属性x，而该属性是描述符属性，为Desc类的实例而已，所以此处并没有顶用Test的任何方法。<br>
那么我们如果直接通过类来调用属性x也可以得到相同的结果。<br>
下面是把t.x改为Test.x运行的结果。</p>
<p>self in Test: &lt;<strong>main</strong>.Test object at 0x00000000022570B8&gt;<br>
self in Desc: &lt;<strong>main</strong>.Desc object at 0x000000000223E208&gt;<br>
&lt;<strong>main</strong>.Desc object at 0x000000000223E208&gt; None &lt;class '<strong>main</strong>.Test'&gt;<br>
题外话：由于在很多时候描述符类中仍然需要知道调用该描述符的实例是谁，所以在描述符类中存在第二个参数ins，用来表示调用它的类实例，所以t.x时可以看到第三行中的运行结果中第二项为&lt;main.Test object at 0x0000000002A570B8&gt;。而采用Test.x进行调用时，由于没有实例，所以返回None。</p>
<p>总结<br>
self在定义时需要定义，但是在调用时会自动传入。<br>
self的名字并不是规定死的，但是最好还是按照约定是用self<br>
self总是指调用时的类的实例。<br>
以上所有代码在Python3.4中均测试通过。</p>
]]></content>
    </entry>
</feed>